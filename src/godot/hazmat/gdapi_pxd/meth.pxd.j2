#########################################################################
# Render arguments body & signature
#########################################################################


{% macro render_args_signature(args) -%}
{%- for arg in args -%}
{{ arg.type.c_type }}{{ "" if arg.type.is_scalar else "*" }} {{ arg.name }}
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
{% endmacro %}


{% macro render_args(args) -%}
{%- for arg in args %}
{{ "&" if arg.type.is_scalar else "" }}{{ arg.name }}
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
{% endmacro %}


#########################################################################
# Utility function
#########################################################################


{% macro render_utility_function_signature(builtin) -%}
{% if builtin.is_vararg %}
{{ "void" if builtin.return_type.is_nil else "gd_variant_t" }} gd_utility_{{ builtin.original_name }}(gd_variant_t *args, int args_count)
{%- else %}
{{ "void" if builtin.return_type.is_nil else builtin.return_type.c_type }} gd_utility_{{ builtin.original_name }}(
    {{- render_args_signature(builtin.arguments) -}}
)
{%- endif %}
{%- endmacro %}


{% macro render_utility_function_ptrcall(builtin) %}
cdef inline {{ render_utility_function_signature(builtin) }}:
{% if (builtin.arguments | length) != 0 %}
    cdef GDExtensionTypePtr[{{ builtin.arguments | length }}] __args = [
        {{- render_args(builtin.arguments) -}}
    ]
{% endif %}
{% if not builtin.return_type.is_nil %}
    cdef {{ builtin.return_type.c_type }} __ret
{%   if not builtin.return_type.is_stack_only %}
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = {{ builtin.return_type.c_name_prefix }}_new()
{%   else %}
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
{%   endif %}
{% endif %}
    gd_utility_{{ builtin.original_name }}_ptr(
        {# GDExtensionTypePtr ret #}
        {{ "NULL" if builtin.return_type.is_nil else "&__ret" }},
        {# const GDExtensionTypePtr *p_arguments #}
        <const void **>{{ "NULL" if (builtin.arguments | length) == 0 else "__args" }},
        {# int p_argument_count #}
        {{ builtin.arguments | length }}
    )
{% if not builtin.return_type.is_nil %}
    return __ret
{% endif %}
{% endmacro %}


{% macro render_utility_function_vararg(builtin) %}
cdef inline {{ render_utility_function_signature(builtin) }}:
{# Godot varargs calling system is a hack: it expects us to provide only #}
{# a single parameter that itself is an array of variant (hence the `&args` #}
{# to pass a `gd_variant_t**` as parameter) whose size is passed in the number #}
{# of parameters fields... Yes this is very confusing stuff, my brain hurts ! #}
{% if builtin.return_type.is_nil %}
    gd_utility_{{ builtin.original_name }}_ptr(NULL, <const void **>&args, args_count)
{% else %}
    cdef gd_variant_t __ret  # TODO: improve return type !
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = gd_variant_new()
    gd_utility_{{ builtin.original_name }}_ptr(&__ret, <const void **>&args, args_count)
    return __ret
{% endif %}
{% endmacro %}


{% macro render_utility_function(builtin) %}
# {{ builtin.original_name }}
{% if builtin.is_vararg %}
{{ render_utility_function_vararg(builtin) }}
{% else %}
{{ render_utility_function_ptrcall(builtin) }}
{% endif %}
{% endmacro %}


#########################################################################
# Builtin constructors/destructor
#########################################################################


{% macro render_builtin_from_variant_signature(builtin) %}
{{ builtin.c_type }} {{ builtin.c_name_prefix }}_from_variant(gd_variant_t *val)
{%- endmacro %}


{% macro render_builtin_into_variant_signature(builtin) %}
{%- if builtin.is_scalar %}
gd_variant_t {{ builtin.c_name_prefix }}_into_variant({{ builtin.c_type }} val)
{%- else %}
gd_variant_t {{ builtin.c_name_prefix }}_into_variant({{ builtin.c_type }} *val)
{%- endif %}
{% endmacro %}


{% macro render_builtin_object_variant_conversions(builtin) %}
cdef inline GDExtensionObjectPtr gd_object_from_variant(gd_variant_t *val):
    cdef GDExtensionObjectPtr ret
    gd_object_from_variant_ptr(&ret, val)
    return ret

cdef inline gd_variant_t gd_object_into_variant(GDExtensionObjectPtr val):
    cdef gd_variant_t ret
    gd_object_into_variant_ptr(&ret, &val)
    return ret
{% endmacro %}


{% macro render_builtin_variant_conversions(builtin) %}
cdef inline {{ render_builtin_from_variant_signature(builtin) }}:
{% if builtin.is_scalar %}
    cdef {{ builtin.c_type }} ret
{% else %}
    # TODO: no longer needed once https://github.com/godotengine/godot/pull/35813 is merged
    cdef {{ builtin.c_type }} ret = {{ builtin.c_name_prefix }}_new()
{% endif %}
    {{ builtin.c_name_prefix }}_from_variant_ptr(&ret, val)
    return ret

cdef inline {{ render_builtin_into_variant_signature(builtin) }}:
    cdef gd_variant_t ret
    {{ builtin.c_name_prefix }}_into_variant_ptr(&ret, {{ "&val" if builtin.is_scalar else "val"}})
    return ret
{% endmacro %}


{% macro render_builtin_constructor_signature(builtin, constructor) -%}
{{ builtin.c_type }} {{ constructor.c_name }}({{ render_args_signature(constructor.arguments) }})
{%- endmacro %}


{% macro render_builtin_constructor(builtin, constructor) %}
cdef inline {{ render_builtin_constructor_signature(builtin, constructor) }}:
    cdef {{ builtin.c_type }} obj
{% if (constructor.arguments | length) != 0 %}
    cdef GDExtensionTypePtr[{{ constructor.arguments | length }}] p_args = [
        {{- render_args(constructor.arguments) -}}
    ]
{% endif %}
    {{ builtin.c_name_prefix }}_constructor_{{ constructor.index }}_ptr(
        &obj,
        <const void **>{{ "NULL" if (constructor.arguments | length) == 0 else "p_args" }}
    )
    return obj
{% endmacro %}


{% macro render_builtin_destructor_signature(builtin) -%}
void {{ builtin.c_destructor_name }}({{ builtin.c_type }}* self)
{%- endmacro %}


{% macro render_builtin_destructor(builtin) %}
cdef inline {{ render_builtin_destructor_signature(builtin) }}:
    {{ builtin.c_name_prefix }}_destructor_ptr(self)
{% endmacro %}


#########################################################################
# Builtin methods
#########################################################################


{% macro render_builtin_method_signature(builtin, meth) -%}
{{ "void" if meth.return_type.is_nil else meth.return_type.c_type }} {{ meth.c_name }}(
    {{- builtin.c_type }} *self
{%- if meth.arguments | length %}, {{ render_args_signature(meth.arguments) -}} {% endif -%}
)
{%- endmacro %}


{% macro render_builtin_method(builtin, meth) %}
cdef inline {{ render_builtin_method_signature(builtin, meth) }}:
{% if meth.arguments | length %}
    cdef GDExtensionTypePtr[{{ meth.arguments | length }}] __args = [
        {{- render_args(meth.arguments) -}}
    ]
{% else %}
    cdef GDExtensionTypePtr* __args = NULL
{% endif %}
{% if not meth.return_type.is_nil %}
    cdef {{ meth.return_type.c_type }} __ret
{%   if not meth.return_type.is_stack_only %}
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = {{ meth.return_type.c_name_prefix }}_new()
{%   else %}
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
{%   endif %}
{% endif %}
    {{ builtin.c_name_prefix }}_meth_{{ meth.name }}_ptr(
        {# GDExtensionTypePtr p_base #}
        self,
        {# const GDExtensionTypePtr *__args #}
        <const void **>__args,
        {# GDExtensionTypePtr __ret #}
        {{ "NULL" if meth.return_type.is_nil else "&__ret" }},
        {# int p_argument_count #}
        {{ meth.arguments | length }}
    )
{% if not meth.return_type.is_nil %}
    return __ret
{% endif %}
{% endmacro %}


#########################################################################
# Builtin setter/getter
#########################################################################


{% macro render_builtin_member_getter(builtin, m) %}
cdef inline {{ m.type.c_type }} {{ builtin.c_name_prefix }}_get_{{ m.name }}({{ builtin.c_type }} *self):
    cdef {{ m.type.c_type }} __ret
{% if not m.type.is_stack_only %}1
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = {{ m.type.c_name_prefix }}_new()
{% else %}
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
{% endif %}
    {{ builtin.c_name_prefix }}_get_{{ m.name }}_ptr(self, &__ret)
    return __ret
{% endmacro %}


{% macro render_builtin_member_setter(builtin, m) %}
cdef inline void {{ builtin.c_name_prefix }}_set_{{ m.name }}(
    {{ builtin.c_type }} *self,
    {{ m.type.c_type }} {{ "" if m.type.is_scalar else "*" }}val
):
    {{ builtin.c_name_prefix }}_set_{{ m.name }}_ptr(self, {{ "&val" if m.type.is_scalar else "val" }})
{% endmacro %}


#########################################################################
# Builtin indexed setter/getter (e.g. `my_array[42]`)
#########################################################################


{% macro render_builtin_indexed_getter(builtin) %}
cdef inline {{ builtin.indexing_return_type.c_type }} {{ builtin.c_name_prefix }}_indexed_getter(const {{ builtin.c_type }} *self, GDExtensionInt index):
    cdef {{ builtin.indexing_return_type.c_type }} __ret
{%   if not builtin.indexing_return_type.is_stack_only %}
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = {{ builtin.indexing_return_type.c_name_prefix }}_new()
{%   else %}
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
{%   endif %}
    {{ builtin.c_name_prefix }}_indexed_getter_ptr(self, index, &__ret)
    return __ret
{% endmacro %}


{% macro render_builtin_indexed_setter(builtin) %}
cdef inline void {{ builtin.c_name_prefix }}_indexed_setter(
    {{ builtin.c_type }} *self,
    GDExtensionInt index,
    {{ builtin.indexing_return_type.c_type }} {{ "" if builtin.indexing_return_type.is_scalar else "*" }}value
):
    {{ builtin.c_name_prefix }}_indexed_setter_ptr(self, index, {{ "&" if builtin.indexing_return_type.is_scalar else "" }}value)
{% endmacro %}


#########################################################################
# Builtin keyed setter/getter (e.g. `my_dict['foo']`)
#########################################################################


{% macro render_builtin_keyed_getter(builtin) %}
cdef inline {{ builtin.indexing_return_type.c_type }} {{ builtin.c_name_prefix }}_keyed_getter(const {{ builtin.c_type }} *self, const gd_variant_t *key):
    cdef {{ builtin.indexing_return_type.c_type }} __ret
{%   if not builtin.indexing_return_type.is_stack_only %}
    # ptrcall makes us jump right into C++ code (i.e. Godot internals) that expects constructor to be called on each parameter
    __ret = {{ builtin.indexing_return_type.c_name_prefix }}_new()
{%   else %}
    # C compiler doesn't like passing to a function a pointer on uninitialized
    # data (see `-Wmaybe-uninitialized`).
    # Should be optimized out in the end given the called function end up inlined.
    memset(&__ret, 0, sizeof(__ret))
{%   endif %}
    {{ builtin.c_name_prefix }}_keyed_getter_ptr(self, key, &__ret)
    return __ret
{% endmacro %}


{% macro render_builtin_keyed_setter(builtin) %}
cdef inline void {{ builtin.c_name_prefix }}_keyed_setter(
    {{ builtin.c_type }} *self,
    const gd_variant_t *key,
    const {{ builtin.indexing_return_type.c_type }} {{ "" if builtin.indexing_return_type.is_scalar else "*" }}value
):
    {{ builtin.c_name_prefix }}_keyed_setter_ptr(self, key, {{ "&" if builtin.indexing_return_type.is_scalar else "" }}value)
{% endmacro %}


#########################################################################
# Builtin operators
#########################################################################


{% macro render_builtin_operators(builtin) %}
{% for o in builtin.operators %}
{%   if o.right_type is none %}
cdef inline {{ o.return_type.c_type }} {{ builtin.c_name_prefix }}_op_{{ o.name }}(
    const {{ builtin.c_type }} *self
):
    cdef {{ o.return_type.c_type }} result
    {{ builtin.c_name_prefix }}_op_{{ o.name }}_ptr(self, NULL, &result)
    return result
{%   else %}
cdef inline {{ o.return_type.c_type }} {{ builtin.c_name_prefix }}_op_{{ o.name }}(
    const {{ builtin.c_type }} *self,
    const {{ o.right_type.c_type }} *other
):
    cdef {{ o.return_type.c_type }} result
    {{ builtin.c_name_prefix }}_op_{{ o.name }}_ptr(self, other, &result)
    return result
{%   endif %}
{% endfor %}
{% endmacro %}


#########################################################################
# All stuff combined
#########################################################################


{% macro render_builtin_methods(builtin) %}
{{ render_builtin_variant_conversions(builtin) }}
{%   for c in builtin.constructors %}
{{ render_builtin_constructor(builtin, c) }}
{%   endfor %}
{%   if not builtin.is_stack_only %}
{{ render_builtin_destructor(builtin) }}
{%   endif %}
{%   for m in builtin.methods %}
{{ render_builtin_method(builtin, m) }}
{%   endfor %}
{%   if builtin.indexing_return_type is not none and builtin.is_keyed %}
{{ render_builtin_keyed_getter(builtin) }}
{{ render_builtin_keyed_setter(builtin) }}
{%   endif %}
{%   if builtin.indexing_return_type is not none and not builtin.is_keyed %}
{{ render_builtin_indexed_getter(builtin) }}
{{ render_builtin_indexed_setter(builtin) }}
{%   endif %}
{{ render_builtin_operators(builtin) }}
{% for m in builtin.members %}
{%   if not m.is_in_struct %}
{{ render_builtin_member_getter(builtin, m) }}
{{ render_builtin_member_setter(builtin, m) }}
{%   endif %}
{% endfor %}
{% endmacro %}
