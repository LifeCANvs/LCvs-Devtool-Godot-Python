{% from 'gdapi_pxd/struct.pxd.j2' import render_builtin_struct %}
{% from 'gdapi_pxd/meth.pxd.j2' import
    render_builtin_object_variant_conversions,
    render_builtin_variant_conversions,
    render_builtin_methods,
    render_utility_function
%}
#
#                               ,;               :      L.                                             ,;
#           .    .            f#i       ittttttttEf     EW:        ,ft         .Gt            i      f#i
#  GEEEEEEELDi   Dt         .E#t        fDDK##DDiE#t    E##;       t#E        j#W:           LE    .E#t
#  ,;;L#K;;.E#i  E#i       i#W,            t#E   E#t    E###t      t#E      ;K#f            L#E   i#W,
#     t#E   E#t  E#t      L#D.             t#E   E#t    E#fE#f     t#E    .G#D.            G#W.  L#D.
#     t#E   E#t  E#t    :K#Wfff;           t#E   E#t fi E#t D#G    t#E   j#K;             D#K. :K#Wfff;
#     t#E   E########f. i##WLLLLt          t#E   E#t L#jE#t  f#E.  t#E ,K#f   ,GD;       E#K.  i##WLLLLt
#     t#E   E#j..K#j...  .E#L              t#E   E#t L#LE#t   t#K: t#E  j#Wi   E#t     .E#E.    .E#L
#     t#E   E#t  E#t       f#E:          jfL#E   E#tf#E:E#t    ;#W,t#E   .G#D: E#t    .K#E        f#E:
#     t#E   E#t  E#t        ,WW;         :K##E   E###f  E#t     :K#D#E     ,K#fK#t   .K#D          ,WW;
#     t#E   f#t  f#t         .D#;          G#E   E#K,   E#t      .E##E       j###t  .W#G            .D#;
#      fE    ii   ii           tt           tE   EL     ..         G#E        .G#t :W##########Wt     tt
#       :                                    .   :                  fE          ;; :,,,,,,,,,,,,,.
#                                                                    ,
#
# The following is pretty verbose, here is the tl;dr:
# - Utility functions exposed as nice inline function
# - Builtins structure definition with both Cython and C in `cdef extern from *`
# - Builtins' constructors/destructor/methods/operators exposed as nice inline function
# - Builtins&global constants as #define


cimport cython
from libc.stdint cimport *
from libc.string cimport memset

from .gdextension_interface cimport *
from .gdnative_ptrs cimport *


##############################################################################
#                         String operation helpers                           #
##############################################################################


cdef extern from "Python.h":
    const char* PyUnicode_AsUTF8AndSize(object, ssize_t*)
    object PyUnicode_DecodeUTF32(const char *s, ssize_t size, const char *errors, int *byteorder)


cdef inline gd_string_t gd_string_from_utf8(const char *cstr):
    cdef gd_string_t gdstr
    pythonscript_gdextension.string_new_with_utf8_chars(&gdstr, cstr)
    return gdstr


cdef inline gd_string_t gd_string_from_utf8_and_len(const char *cstr, ssize_t cstr_size):
    cdef gd_string_t gdstr
    pythonscript_gdextension.string_new_with_utf8_chars_and_len(&gdstr, cstr, cstr_size)
    return gdstr


cdef inline gd_string_t gd_string_from_unchecked_pystr(object pystr):
    cdef ssize_t buffsize
    cdef const char *buff = PyUnicode_AsUTF8AndSize(pystr, &buffsize)
    return gd_string_from_utf8_and_len(buff, buffsize)


cdef inline object gd_string_to_pystr(gd_string_t *gdstr):
    cdef GDExtensionInt l = pythonscript_gdextension.string_to_utf32_chars(gdstr, NULL, 0)
    cdef const char32_t *gdbuff = pythonscript_gdextension.string_operator_index_const(gdstr, 0)
    return PyUnicode_DecodeUTF32(<char *>gdbuff, l * cython.sizeof(char32_t), NULL, NULL)


cdef inline gd_string_t gd_string_from_pybytes(bytes cstr):
    cdef gd_string_t gdstr
    pythonscript_gdextension.string_new_with_utf8_chars_and_len(&gdstr, <char*>cstr, len(cstr))
    return gdstr


cdef inline gd_string_name_t gd_string_name_from_unchecked_pystr(object pystr):
    cdef ssize_t buffsize
    cdef const char *buff = PyUnicode_AsUTF8AndSize(pystr, &buffsize)
    return gd_string_name_from_utf8_and_len(buff, buffsize)


cdef inline gd_string_name_t gd_string_name_from_pybytes(bytes cstr):
    cdef gd_string_t gdstr = gd_string_from_pybytes(cstr)
    cdef gd_string_name_t gdstrname = gd_string_name_new_from_string(&gdstr)
    gd_string_del(&gdstr)
    return gdstrname


cdef inline gd_string_name_t gd_string_name_from_utf8(const char *cstr):
    cdef gd_string_name_t gdstr
    pythonscript_gdextension.string_name_new_with_utf8_chars(&gdstr, cstr)
    return gdstr


cdef inline gd_string_name_t gd_string_name_from_utf8_and_len(const char *cstr, ssize_t cstr_size):
    cdef gd_string_name_t gdstr
    pythonscript_gdextension.string_name_new_with_utf8_chars_and_len(&gdstr, cstr, cstr_size)
    return gdstr


##############################################################################
#                        Builtins stucts                                     #
##############################################################################


# Renames to stay consistent with other builtins naming convention we use
ctypedef GDExtensionBool gd_bool_t
ctypedef {{ api.int_type.c_type }} gd_int_t
ctypedef {{ api.float_type.c_type }} gd_float_t
# Note we don't really care this is a pointer as we always treat it as an opaque structure
ctypedef GDExtensionObjectPtr gd_object_t
cdef extern from * nogil:
    # Needed to have `gd_object_t` also exposed in .h/.c files
    """
    typedef GDExtensionObjectPtr gd_object_t;
    """

# Declare builtins structures in `cdef extern` to also provide a C struct definition
# so that they can be used in exported to C functions (i.e. `cdef api` functions)


{{ render_builtin_struct(api.variant_type) }}

{% for builtin in api.builtins %}

{{ render_builtin_struct(builtin) }}
{% endfor %}


##############################################################################
#                        Builtins methods                                    #
##############################################################################


cdef inline gd_variant_t gd_variant_new():
    cdef gd_variant_t variant
    # Zero-init is a fast way to represent a Nil variant
{% for i in range(api.variant_type.size) %}
    variant._gd_opaque[{{ i }}] = 0
{% endfor %}
    return variant


cdef inline void gd_variant_del(gd_variant_t *variant):
    pythonscript_gdextension.variant_destroy(variant)


{{ render_builtin_object_variant_conversions() }}


{{ render_builtin_variant_conversions(api.bool_type) }}


{{ render_builtin_variant_conversions(api.int_type) }}


{{ render_builtin_variant_conversions(api.float_type) }}
{% for builtin in api.builtins %}


{{ render_builtin_methods(builtin )}}
{% endfor %}


##############################################################################
#                          Builtin constants & enums                         #
##############################################################################
{% for builtin in api.builtins %}


{# Constants #}
# {{ builtin.original_name }}
{%   for c in builtin.constants if c.type.is_scalar %}
{%     if loop.first %}
cdef extern from *:
    """
{%     endif %}
    #define {{ builtin.c_name_prefix.upper() }}_{{ c.name }} {{ c.value }}
{%     if loop.last %}
    """
{%     endif %}
{%   endfor %}
{%   for c in builtin.constants if c.type.is_scalar %}
    int {{ builtin.c_name_prefix.upper() }}_{{ c.name }}
{%   endfor %}
{%   for c in builtin.constants if not c.type.is_scalar %}
cdef inline {{ c.type.c_type }} {{ builtin.c_name_prefix }}_make_constant_{{ c.name }}():
    # TODO: Initialize as {{ c.value }}
    return {{ c.type.c_name_prefix }}_new()
{%   endfor %}
{% endfor %}
{# Don't expose enums given they are already provided among the constants #}


##############################################################################
#                              Utility functions                             #
##############################################################################
{% for utility in api.utility_functions %}


{{ render_utility_function(utility) }}
{% endfor %}


##############################################################################
#                        Global Constants & Enums                            #
##############################################################################
{% for spec in api.global_enums %}


cdef enum {{ spec.cy_type }}:
{%   for key, value in spec.values.items() %}
    {{ key }} = {{ value }}
{%   endfor %}
{% endfor %}


##############################################################################
#                              Native structures                             #
##############################################################################

{% for spec in api.native_structures %}
cdef struct {{ spec.c_type }}:
{%   for name, type in spec.fields.items() %}
    {{ type.c_type }} {{ name }}
{%   endfor %}
{% endfor %}
